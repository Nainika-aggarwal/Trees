/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    boolean find(TreeNode A, int B, int C)
    {
        if(A != null)
        {
            if(A.val == B || A.val == C)
            {
                return true;
            }
            return find(A.left,B,C) || find(A.right,B,C);
        }
        return false;
    }
    public int lca(TreeNode A, int B, int C) {
       if(A == null)
       return -1;
       if(A.val == B && A.val == C)
       {
           return A.val;
       }
       if(A.val == B)
       {
           if( find(A.left,C,C) || find(A.right,C,C))
           return A.val;
           return -1;
       }
       if(A.val == C)
       {
           if(find(A.left,B,B) || find(A.right,B,B))
           return A.val;
           return -1;
       }
       boolean temp = find(A.left,B,C);
       boolean temp1 = find(A.right,B,C);
       if(temp && temp1)
       {
           return A.val;
       }
       if(!temp && temp1)
       {
           return lca(A.right,B,C);
       }
       
       return lca(A.left,B,C);
    }
}
